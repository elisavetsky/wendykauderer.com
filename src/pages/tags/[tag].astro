---
// Astro
import { getCollection, type CollectionEntry } from 'astro:content';

// import layout
import BaseLayout from '../../layouts/BaseLayout.astro';
import ArtworkGridLayout from "../../layouts/ArtworkGridLayout.astro";

// import components
import SectionTitle from "../../components/SectionTitle.jsx";
import GridHeader from "../../components/GridHeader.jsx";
import GridNav from "../../components/GridNav.jsx";
import GridNavItems from "../../components/GridNavItems.jsx";

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {

   // import all non-draft artwork
   const artworkEntries = await getCollection('artwork', ({data}) => !data.draft);

   // sort entries from latest to oldest
   const sortedEntries = artworkEntries.sort((a, b) => Date.parse(b.data.date) - Date.parse(a.data.date));

   // create a Set so each tag is only listed once
   const allUsedTags = new Set();

   // map over each entry to grab its tags and add it to the Set
   sortedEntries.map((entry) => {
      entry.data.tags && entry.data.tags.map((tag) => allUsedTags.add(tag.id));
   })

   // import only used tags which we defined in the allTags set
   const tagCollection = await getCollection('tags', ((tag) => allUsedTags.has(tag.id)));
   
   
   return Array.from(allUsedTags).map((tag) => {

      // filter entries by tag from the URL param
      const entriesByTag = sortedEntries.filter((sortedEntry) => sortedEntry.data.tags.find((entryTag) => {

         return entryTag.id === tag
      }))

      // get matching tag object from 'tags' collection to use for templates
      const matchingTagObject = tagCollection.filter(({id}) => id === tag)[0]

      return {
         params: { 
            tag: tag,
         }, 
         props: { 
            entries: entriesByTag,
            tagCollection: tagCollection,
            tag: matchingTagObject
         },
      }
   });
}

// define types with typescript
type Props = {
   entries: CollectionEntry<"artwork">,
   tag: CollectionEntry<"tags">,
   tagCollection: CollectionEntry<"tags">
}

// 2. For your template, you can get the entry directly from the prop
const { entries, tag, tagCollection } = Astro.props;
const params = Astro.params;
const urlPath = Astro.url.pathname;
---

<BaseLayout pageTitle={`${tag.data.title} art`}>
   <section class="relative">

      <GridHeader>
         <SectionTitle 
            title={tag.data.title}
         />
         <GridNav client:load >
            <input 
               transition:persist 
               id="expand-tags" 
               name="Expand artwork tags" 
               type="checkbox" 
               class="sr-only right-6 top-5 peer/checkbox"
            >
            <GridNavItems tagCollection={tagCollection} urlPath={urlPath} />
         </GridNav>
      </GridHeader>
   
      <ArtworkGridLayout artwork={entries} />
      
   </section>
</BaseLayout>

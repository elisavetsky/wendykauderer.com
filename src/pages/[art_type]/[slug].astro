---
// Astro
import { getCollection, getEntries, type CollectionEntry } from 'astro:content';
import { getImage } from 'astro:assets';

// Import SitewideConfig
import * as SitewideConfig from "../../configuration/SitewideConfig.md";

// import tools
import { convertToArray, getPrevAndNextEntry } from "../../utils/arrayTools.js"
import slugify from '@sindresorhus/slugify';

// import layout
import BaseLayout from '../../layouts/BaseLayout.astro';

// import components
import FullArtwork from '../../components/FullArtwork.astro';
import ArtDetails from '../../components/ArtDetails.jsx';
import PrevNextArtwork from '../../components/PrevNextArtwork.jsx';
import LightboxWrapper from "../../components/LightboxWrapper.jsx";
import ArtworkArticleLayout from '../../components/layouts/ArtworkArticleLayout.jsx';


// Generate a new path for every collection entry
export async function getStaticPaths() {

   // import all non-draft artwork and sort from latest to oldest
   const artworkEntries = await getCollection('artwork', ({data}) => !data.draft)
      .then((res) => res.sort((a, b) => Date.parse(b.data.date) - Date.parse(a.data.date)));

   return artworkEntries.map((entry) => ({
      params: { 
         art_type: entry.data.art_type,
         slug: entry.slug
      }, 
      props: { 
         entry,
         artworkEntries: artworkEntries
      },
   }));
}

// define types with typescript
// these are my first couple of lines of typescript :)
type Props = {
   entry: CollectionEntry<"artwork">,
   artworkEntries: CollectionEntry<"artwork">
}

// Getting the entry and artworkEntries directly from the prop
const { entry, artworkEntries } = Astro.props;
const params = Astro.params;

// get all optimized images
const optimizedMainImage = await getImage({src: entry.data.image, widths: [120, 240, 320, 540, 640, 700, 1024, entry.data.image.width] });
const optimizedAdditionalImages = entry.data.images && await Promise.all(
   entry.data.images?.map(async ({image}) => await getImage({src: image, widths: [120, 240, 320, 540, 640, 700, 1024, image.width] }))
)

// Get the previous and next entry matching the art_type
const { prevEntry, nextEntry } = getPrevAndNextEntry({ currentEntry: entry, artworkEntries: artworkEntries });

// Get the tags as a separate collection since it is referenced from the schema
const tags = await getEntries(entry.data.tags);

// Get markdown content
const { Content } = await entry.render();

// Transition
import { fade } from 'astro:transitions';
---

<BaseLayout 
   pageTitle={entry.data.title}
   pageSlug={entry.slug}
   ogTitle={`${entry.data.title} by ${SitewideConfig.frontmatter.site_name}`}
   ogDescription={entry.body}
   ogImage={entry.data.image}
   blurredBg={entry.data.image}
> 
   <ArtworkArticleLayout bodyLength={entry.body.length}>
      <LightboxWrapper 
         slot="lightbox"
         client:visible
         mainImage={{
            image: optimizedMainImage, 
            image_alt: entry.data.main_image_alt
         }} 
         additionalImages={{
            optimizedImages: optimizedAdditionalImages || [],
            imagesWithAlts: entry.data.images || []
         }}
      >
         <FullArtwork 
            buttonRole
            focusFirst="true"
            sold={entry.data.sold} 
            title={entry.data.title} 
            date={entry.data.date}
            artType={entry.data.art_type}
            href={`#`}
            mainImage={{
               src: entry.data.image,
               alt: entry.data.main_image_alt
            }}
            showFullDescription={true}
            loading="eager"
            transition:animate="fade"
            transition:name={`image:${entry.slug}-${slugify(entry.data.image.src)}`} 
            data-pagefind-index-attrs="alt"
            data-pagefind-meta="image[src], image_alt[alt]"
         />
      </LightboxWrapper>

      <ArtDetails 
         slot="art-details" 
         artType={entry.data.art_type} 
         sold={entry.data.sold} 
         artTitle={entry.data.title} 
         artTags={tags}
      />
         
      <Content slot="content" />

      <PrevNextArtwork 
         currentArtType={entry.data.art_type}
         slot="prev-next-artwork"
         prevEntry={prevEntry}
         nextEntry={nextEntry} 
      />
      

   </ArtworkArticleLayout>
</BaseLayout>
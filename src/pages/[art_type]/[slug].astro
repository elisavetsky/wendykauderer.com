---
// Astro
import { getCollection, getEntries } from 'astro:content';

// Import SitewideConfig
import * as SitewideConfig from "../../configuration/SitewideConfig.md";

// import tools
import { convertToArray } from "../../utils/arrayTools.js"

// import layout
import BaseLayout from '../../layouts/BaseLayout.astro';
import MainLayout from '../../layouts/MainLayout.astro';

// import components
import FullArtwork from '../../components/FullArtwork.astro';
import ArtDate from '../../components/ArtDate.jsx';
import ArtDetails from '../../components/ArtDetails.astro';
import PrevNextArtwork from '../../components/PrevNextArtwork';

// Generate a new path for every collection entry
export async function getStaticPaths() {

   // import all non-draft artwork
   const artworkEntries = await getCollection('artwork', ({data}) => !data.draft)
      .then((res) => res.sort((a, b) => Date.parse(b.data.date) - Date.parse(a.data.date)));

   return artworkEntries.map((entry) => ({
      params: { 
         art_type: entry.data.art_type,
         slug: entry.slug
      }, 
      props: { 
         entry,
         artworkEntries: artworkEntries
      },
   }));
}

// Getting the entry and artworkEntries directly from the prop
const { entry, artworkEntries } = Astro.props;
const params = Astro.params;

// Get the previous and next entry matching the art_type
function getPrevAndNextEntry() {
   
   // Get the matching art_type array
   const matchingArtTypeEntries = artworkEntries.filter((artworkEntry) => {
      return artworkEntry.data.art_type === entry.data.art_type
   });

   const numberOfEntries = matchingArtTypeEntries.length; // Get the number of entries matching the art_type
   
   // Grab the index of this current entry where it appears in the designated art_type.
   // If art_type only has one entry, convert it to an array!
   const currentEntryIndex = convertToArray(matchingArtTypeEntries).findIndex((artworkEntry) => artworkEntry.slug === entry.slug);

   return {
      prevEntry: currentEntryIndex - 1 === numberOfEntries
         ? null
         : matchingArtTypeEntries[currentEntryIndex - 1], // Give a null value if there is no previous entry
      nextEntry: currentEntryIndex + 1 === numberOfEntries
         ? null
         : matchingArtTypeEntries[currentEntryIndex + 1] // Give a null value if there is no next entry
   }
}

const { prevEntry, nextEntry } = getPrevAndNextEntry();

// Get the tags as a separate collection since it is referenced from the schema
const tags = await getEntries(entry.data.tags);

// Get markdown content
const { Content } = await entry.render();
---

<BaseLayout 
   pageTitle={`${entry.data.title}`}
   ogTitle={`${entry.data.title} by ${SitewideConfig.frontmatter.site_name}`}
   ogDescription={entry.body}
   ogImage={entry.data.image.src}
   options={{
      headerShadow: false
   }}
   blurredBg={entry.data.image}
> 
   <article class="">
      <div class="w-full flex flex-col justify-between py-2 sm:flex-row md:flex-col md:px-4 md:gap-6 lg:flex-row ">
         <div class="sm:w-3/5 md:w-full lg:w-7/12 xl:min-w-min">
            <FullArtwork 
               sold={entry.data.sold} 
               title={entry.data.title} 
               date={entry.data.date}
               artType={entry.data.art_type}
               href={`#`}
               mainImage={{
                  src: entry.data.image,
                  alt: entry.data.main_image_alt
               }}
               images={entry.data.images}
               description={entry.data.description}
               showFullDescription={true}
               loading="eager"
               classes=""
            />
         </div>
         <div class="relative px-4 prose prose-zinc prose-h1:font-medium prose-h1:mb-7 prose-a:no-underline max-w-none dark:prose-invert sm:w-2/5 md:prose-lg md:px-0 md:w-full lg:prose-base lg:w-5/12 xl:prose-lg xl:w-96 xl:mr-auto">
            <div class="top-0 lg:sticky lg:py-4">
               <header class="mt-10 text-md sm:mt-0 md:mt-10 lg:mt-0">
                  <ArtDate date={entry.data.date} />
                  <h1>{entry.data.title}</h1>
               </header>
               <ArtDetails artType={entry.data.art_type} tags={tags} />
               <div aria-label="Art description">
                  <Content />
               </div>
               <hr class="border">
               <PrevNextArtwork client:load prevEntry={prevEntry} nextEntry={nextEntry} />
            </div>
            
         </div>
      </div>
      
   </article>
</BaseLayout>
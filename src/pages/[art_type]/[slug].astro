---
// Astro
import { getCollection, getEntries } from 'astro:content';

// Import SitewideConfig
import * as SitewideConfig from "../../configuration/SitewideConfig.md";

// import tools
import { convertToArray } from "../../utils/arrayTools.js"
import { getAspectRatio } from "../../utils/imageTools.js"

// import layout
import BaseLayout from '../../layouts/BaseLayout.astro';
import MainLayout from '../../layouts/MainLayout.astro';

// import components
import FullArtwork from '../../components/FullArtwork.astro';
import ArtDetails from '../../components/ArtDetails.jsx';
import ArtTags from '../../components/ArtTags.jsx';
import PrevNextArtwork from '../../components/PrevNextArtwork';
import LightboxWrapper from "../../components/LightboxWrapper.jsx";

// Generate a new path for every collection entry
export async function getStaticPaths() {

   // import all non-draft artwork
   const artworkEntries = await getCollection('artwork', ({data}) => !data.draft)
      .then((res) => res.sort((a, b) => Date.parse(b.data.date) - Date.parse(a.data.date)));

   return artworkEntries.map((entry) => ({
      params: { 
         art_type: entry.data.art_type,
         slug: entry.slug
      }, 
      props: { 
         entry,
         artworkEntries: artworkEntries
      },
   }));
}

// Getting the entry and artworkEntries directly from the prop
const { entry, artworkEntries } = Astro.props;
const params = Astro.params;

// Get the previous and next entry matching the art_type
function getPrevAndNextEntry() {
   
   // Get the matching art_type array
   const matchingArtTypeEntries = artworkEntries.filter((artworkEntry) => {
      return artworkEntry.data.art_type === entry.data.art_type
   });

   const numberOfEntries = matchingArtTypeEntries.length; // Get the number of entries matching the art_type
   
   // Grab the index of this current entry where it appears in the designated art_type.
   // If art_type only has one entry, convert it to an array!
   const currentEntryIndex = convertToArray(matchingArtTypeEntries).findIndex((artworkEntry) => artworkEntry.slug === entry.slug);

   return {
      prevEntry: currentEntryIndex - 1 === numberOfEntries
         ? null
         : matchingArtTypeEntries[currentEntryIndex - 1], // Give a null value if there is no previous entry
      nextEntry: currentEntryIndex + 1 === numberOfEntries
         ? null
         : matchingArtTypeEntries[currentEntryIndex + 1] // Give a null value if there is no next entry
   }
}

const { prevEntry, nextEntry } = getPrevAndNextEntry();

// Get the tags as a separate collection since it is referenced from the schema
const tags = await getEntries(entry.data.tags);

// Get markdown content
const { Content } = await entry.render();

// Transition
import { fade } from 'astro:transitions';
---

<BaseLayout 
   pageTitle={entry.data.title}
   ogTitle={`${entry.data.title} by ${SitewideConfig.frontmatter.site_name}`}
   ogDescription={entry.body}
   ogImage={entry.data.image.src}
   options={{
      headerShadow: false
   }}
   blurredBg={entry.data.image}
> 
   <article 
      data-pagefind-body
      class="relative w-full flex flex-col justify-between sm:flex-row md:flex-col sm:px-4 sm:gap-4 md:gap-2 lg:gap-6 lg:flex-row " 
   >
      <div class="h-fit static top-8 sm:sticky md:static lg:sticky sm:w-3/5 md:w-full lg:7/12 3xl:w-full 3xl:max-w-full" >
         <noscript>
            <FullArtwork 
               sold={entry.data.sold} 
               title={entry.data.title} 
               date={entry.data.date}
               artType={entry.data.art_type}
               href={`#`}
               mainImage={{
                  src: entry.data.image,
                  alt: entry.data.main_image_alt
               }}
               showFullDescription={true}
               loading="eager"
               classes=""
               data-pagefind-index-attrs="alt"
            />
         </noscript>

         <div 
            style={{
               height: "auto",
               aspectRatio: getAspectRatio(entry.data.image.width, entry.data.image.height),
               maxWidth: "100%"
            }}
         >
            <LightboxWrapper 
               client:only='react' 
               mainImage={{
                  image: entry.data.image, 
                  alt:entry.data.main_image_alt
               }} 
               imageArr={entry.data.images || []}
            >
               <FullArtwork 
                  sold={entry.data.sold} 
                  title={entry.data.title} 
                  date={entry.data.date}
                  artType={entry.data.art_type}
                  href={`#`}
                  mainImage={{
                     src: entry.data.image,
                     alt: entry.data.main_image_alt
                  }}
                  showFullDescription={true}
                  loading="eager"
                  classes=""
                  transition:animate="fade"
                  transition:name={`image:${entry.slug}-${entry.data.art_type}`} 
                  data-pagefind-index-attrs="alt"
                  data-pagefind-meta="image[src], image_alt[alt]"
               />
            </LightboxWrapper>
         </div>
      </div>
      
      <div 
         class="flex flex-col h-full  px-4 prose prose-zinc prose-h1:font-medium prose-h1:mb-7 prose-a:no-underline dark:prose-invert sm:w-2/5 sm:max-w-[40%] sm:px-0 sm:pt-4 sm:sticky sm:top-0 md:pt-0 md:prose-lg md:w-full md:max-w-full md:static lg:sticky lg:pt-6 lg:prose-base lg:w-5/12 lg:min-w-[22rem] xl:prose-lg 3xl:w-full  3xl:flex-row 3xl:gap-4 3xl:justify-between"
      >
         <div class="3xl:sticky 3xl:top-8 3xl:h-full 3xl:min-w-[26rem] 3xl:max-w-[26rem]">
            <header class="mt-10 text-md sm:mt-0 md:mt-10 lg:mt-0">
               <ArtDetails date={entry.data.date} sold={entry.data.sold} />
               <h1>{entry.data.title}</h1>
            </header>

            <ArtTags artType={entry.data.art_type} tags={tags} />
            
            <div class="min-w-[100%] sm:max-h-[18rem] md:max-h-none lg:max-h-[20rem] xl:max-h-[23rem] 3xl:max-h-none">
               {entry.body.length > 310
                  ?  <div class="max-h-[inherit] max-w-[inherit] overflow-scroll sm:fade-y-edges md:fade-y-edges-none md:max-h-none lg:fade-y-edges lg:max-h-[inherit] 3xl:fade-y-edges-none 3xl:max-h-none">
                        <Content />
                     </div>
                  :  <div class="h-full  lg:max-h-[inherit] pt-0.5">
                        <Content />
                     </div>
               }

            </div>
            <!-- <hr class="border"> -->
         </div>
         <PrevNextArtwork prevEntry={prevEntry} nextEntry={nextEntry} />
      </div>
   </article>
</BaseLayout>

<style>
  
</style>